{"version":3,"sources":["../../src/filter.ts","../../src/client.ts","../../src/select.ts"],"sourcesContent":["import type { BaseRecord } from './types.js';\n\ntype ActualFilter<T extends any, K extends keyof T = keyof T> = [\n\tK,\n\tFilterOperand,\n\tT[K]\n];\n\nexport type FilterOperand =\n\t| '='\n\t| '!='\n\t| '>'\n\t| '>='\n\t| '<'\n\t| '<='\n\t| '~'\n\t| '!~'\n\t| '?='\n\t| '?!='\n\t| '?>'\n\t| '?>='\n\t| '?<'\n\t| '?<='\n\t| '?~'\n\t| '?!~';\n\nexport type FilterParam<T extends BaseRecord> = { __record__?: T } & string;\n\nexport type Filter<T extends BaseRecord> =\n\t| ActualFilter<T>\n\t| FilterParam<T>\n\t| false\n\t| null\n\t| undefined;\n\nexport function serializeFilterTuple([key, op, val]: ActualFilter<any>) {\n\tconst type = typeof val;\n\tif (type === 'boolean' || type === 'number') {\n\t\tval = val.toString();\n\t} else if (type === 'string') {\n\t\tval = \"'\" + val.replace(/'/g, \"\\\\'\") + \"'\";\n\t} else if (val === null) {\n\t\tval = 'null';\n\t} else if (val instanceof Date) {\n\t\tval = \"'\" + val.toISOString().replace('T', ' ') + \"'\";\n\t} else {\n\t\tval = \"'\" + JSON.stringify(val).replace(/'/g, \"\\\\'\") + \"'\";\n\t}\n\n\treturn `${String(key)} ${op} ${val}`;\n}\n\nexport function serializeFilter(filter: Filter<any>): string | null {\n\tif (!filter) return null;\n\treturn Array.isArray(filter) ? serializeFilterTuple(filter) : filter;\n}\n\nexport function serializeFilters(filters: Filter<any>[]) {\n\treturn filters.filter((val) => !!val).map(serializeFilter);\n}\n\nexport function and<T extends BaseRecord>(\n\t...filters: Filter<T>[]\n): FilterParam<T> {\n\tconst str = serializeFilters(filters).join(' && ');\n\tif (!str.length) return '';\n\treturn `(${str})`;\n}\n\nexport function or<T extends BaseRecord>(\n\t...filters: Filter<T>[]\n): FilterParam<T> {\n\tconst str = serializeFilters(filters).join(' || ');\n\tif (!str.length) return '';\n\treturn `(${str})`;\n}\n\nexport function eq<T extends BaseRecord, Key extends keyof T>(\n\tcolumn: Key,\n\tvalue: T[Key]\n): FilterParam<T> {\n\treturn serializeFilterTuple([column, '=', value]);\n}\n\nexport function neq<T extends BaseRecord, Key extends keyof T>(\n\tcolumn: Key,\n\tvalue: T[Key]\n): FilterParam<T> {\n\treturn serializeFilterTuple([column, '!=', value]);\n}\n\nexport function gt<T extends BaseRecord, Key extends keyof T>(\n\tcolumn: Key,\n\tvalue: T[Key]\n): FilterParam<T> {\n\treturn serializeFilterTuple([column, '>', value]);\n}\n\nexport function gte<T extends BaseRecord, Key extends keyof T>(\n\tcolumn: Key,\n\tvalue: T[Key]\n): FilterParam<T> {\n\treturn serializeFilterTuple([column, '>=', value]);\n}\n\nexport function lt<T extends BaseRecord, Key extends keyof T>(\n\tcolumn: Key,\n\tvalue: T[Key]\n): FilterParam<T> {\n\treturn serializeFilterTuple([column, '<', value]);\n}\n\nexport function lte<T extends BaseRecord, Key extends keyof T>(\n\tcolumn: Key,\n\tvalue: T[Key]\n): FilterParam<T> {\n\treturn serializeFilterTuple([column, '<=', value]);\n}\n\nexport function like<T extends BaseRecord, Key extends keyof T>(\n\tcolumn: Key,\n\tvalue: T[Key]\n): FilterParam<T> {\n\treturn serializeFilterTuple([column, '~', value]);\n}\n\nexport function nlike<T extends BaseRecord, Key extends keyof T>(\n\tcolumn: Key,\n\tvalue: T[Key]\n): FilterParam<T> {\n\treturn serializeFilterTuple([column, '!~', value]);\n}\n","import PocketBase, {\n\tListResult,\n\tOAuth2AuthConfig,\n\tRecordAuthResponse,\n\tRecordOptions,\n\tRecordService,\n\tRecordSubscription,\n\tSendOptions,\n\tUnsubscribeFunc\n} from 'pocketbase';\nimport {\n\tBaseRecord,\n\tGenericCollection,\n\tGenericSchema,\n\tMaybeArray,\n\tRecordWithExpandToDotPath\n} from './types.js';\nimport {\n\tResolveSelectWithExpand,\n\tSelectWithExpand,\n\tresolveSelect\n} from './select.js';\nimport { Sort } from './sort.js';\nimport { Filter, serializeFilter } from './filter.js';\n\nexport interface ViewCollectionService<\n\tCollection extends GenericCollection,\n\tExpandedRecord extends BaseRecord = RecordWithExpandToDotPath<Collection>\n> {\n\tcollectionName: Collection['collectionName'];\n\tclient: PocketBase;\n\n\tsubscribe<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\ttopic: string,\n\t\tcallback: (\n\t\t\tdata: RecordSubscription<\n\t\t\t\tResolveSelectWithExpand<Collection, TSelect>\n\t\t\t>\n\t\t) => void,\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t} & SendOptions\n\t): Promise<UnsubscribeFunc>;\n\n\tgetFullList<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t\tpage?: number;\n\t\t\tperPage?: number;\n\t\t\tsort?: MaybeArray<Sort<ExpandedRecord>>;\n\t\t\tfilter?: Filter<ExpandedRecord>;\n\t\t} & SendOptions\n\t): Promise<ResolveSelectWithExpand<Collection, TSelect>[]>;\n\tgetList<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\tpage?: number,\n\t\tperPage?: number,\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t\tsort?: MaybeArray<Sort<ExpandedRecord>>;\n\t\t\tfilter?: Filter<ExpandedRecord>;\n\t\t} & SendOptions\n\t): Promise<ListResult<ResolveSelectWithExpand<Collection, TSelect>>>;\n\tgetFirstListItem<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\tfilter: Filter<ExpandedRecord>,\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t\tsort?: MaybeArray<Sort<ExpandedRecord>>;\n\t\t} & SendOptions\n\t): Promise<ResolveSelectWithExpand<Collection, TSelect>>;\n\tgetOne<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\tid: string,\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t} & SendOptions\n\t): Promise<ResolveSelectWithExpand<Collection, TSelect>>;\n\n\tcreateFilter(filter: Filter<ExpandedRecord>): Filter<ExpandedRecord>;\n\n\tcreateSort(...sort: Sort<ExpandedRecord>[]): Sort<ExpandedRecord>;\n\n\tcreateSelect<T extends SelectWithExpand<Collection>>(select: T): T;\n}\n\nexport interface BaseCollectionService<Collection extends GenericCollection>\n\textends ViewCollectionService<Collection> {\n\tcreate<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\tbodyParams: Collection['create'],\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t} & SendOptions\n\t): Promise<ResolveSelectWithExpand<Collection, TSelect>>;\n\tupdate<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\tid: string,\n\t\tbodyParams: Collection['update'],\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t} & SendOptions\n\t): Promise<ResolveSelectWithExpand<Collection, TSelect>>;\n\tdelete(id: string): Promise<boolean>;\n}\n\nexport interface AuthCollectionService<Collection extends GenericCollection>\n\textends BaseCollectionService<Collection>,\n\t\tPick<RecordService, (typeof FORWARD_METHODS)[number]> {\n\tauthWithPassword<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\tusernameOrEmail: string,\n\t\tpassword: string,\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t} & SendOptions\n\t): Promise<\n\t\tRecordAuthResponse<ResolveSelectWithExpand<Collection, TSelect>>\n\t>;\n\tauthWithOAuth2Code<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\tprovider: string,\n\t\tcode: string,\n\t\tcodeVerifier: string,\n\t\tredirectUrl: string,\n\t\tcreateData?: {\n\t\t\t[key: string]: any;\n\t\t},\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t} & SendOptions\n\t): Promise<\n\t\tRecordAuthResponse<ResolveSelectWithExpand<Collection, TSelect>>\n\t>;\n\tauthWithOAuth2(\n\t\toptions: Omit<OAuth2AuthConfig, 'createData'> & {\n\t\t\tcreateData?: Collection['create'];\n\t\t} & SendOptions\n\t): Promise<RecordAuthResponse<Collection['response']>>;\n\tauthRefresh<TSelect extends SelectWithExpand<Collection> | {}>(\n\t\toptions?: {\n\t\t\tselect?: TSelect;\n\t\t} & SendOptions\n\t): Promise<\n\t\tRecordAuthResponse<ResolveSelectWithExpand<Collection, TSelect>>\n\t>;\n}\n\nconst FORWARD_METHODS = [\n\t'unsubscribe',\n\n\t'listAuthMethods',\n\t'requestPasswordReset',\n\t'confirmPasswordReset',\n\t'requestVerification',\n\t'confirmVerification',\n\t'requestEmailChange',\n\t'confirmEmailChange',\n\t'listExternalAuths',\n\t'unlinkExternalAuth'\n] as const;\n\nexport class TypedRecordService\n\timplements BaseCollectionService<GenericCollection>\n{\n\tconstructor(readonly service: RecordService<any>) {\n\t\tfor (const name of FORWARD_METHODS) {\n\t\t\t// @ts-ignore\n\t\t\tthis[name] = this.service[name].bind(this.service);\n\t\t}\n\t}\n\n\tget client() {\n\t\treturn this.service.client;\n\t}\n\n\tget collectionName() {\n\t\treturn this.service.collectionIdOrName;\n\t}\n\n\tprivate prepareOptions({\n\t\tselect,\n\t\tfilter,\n\t\tsort,\n\t\t...options\n\t}: RecordOptions = {}): RecordOptions {\n\t\tconst { expand, fields } = resolveSelect(select);\n\n\t\tif (fields) options.fields = fields;\n\t\tif (expand) options.expand = expand;\n\t\tif (filter) options.filter = serializeFilter(filter) ?? '';\n\n\t\tif (Array.isArray(sort) && sort.length) {\n\t\t\toptions.sort = sort.join(',');\n\t\t} else if (sort) {\n\t\t\toptions.sort = sort;\n\t\t}\n\n\t\treturn options;\n\t}\n\n\tcreateFilter(filter: Filter<Record<string, any>>) {\n\t\treturn serializeFilter(filter);\n\t}\n\n\tcreateSort(...sorters: any[]): any {\n\t\treturn sorters.filter((x) => typeof x === 'string').join(',');\n\t}\n\n\tcreateSelect(select: any) {\n\t\treturn select;\n\t}\n\n\tsubscribe(\n\t\ttopic: string,\n\t\tcallback: (data: RecordSubscription<any>) => void,\n\t\toptions?: SendOptions\n\t): Promise<UnsubscribeFunc> {\n\t\treturn this.service.subscribe(\n\t\t\ttopic,\n\t\t\tcallback,\n\t\t\tthis.prepareOptions(options)\n\t\t);\n\t}\n\n\tgetFullList(options?: SendOptions) {\n\t\treturn this.service.getFullList(this.prepareOptions(options));\n\t}\n\n\tgetList(page?: number, perPage?: number, options?: SendOptions) {\n\t\treturn this.service.getList(\n\t\t\tpage,\n\t\t\tperPage,\n\t\t\tthis.prepareOptions(options)\n\t\t);\n\t}\n\n\tgetFirstListItem(filter: string, options?: SendOptions) {\n\t\treturn this.service.getFirstListItem(\n\t\t\tfilter,\n\t\t\tthis.prepareOptions(options)\n\t\t);\n\t}\n\n\tgetOne(\n\t\tid: string,\n\t\toptions?: {\n\t\t\tselect?: any;\n\t\t} & SendOptions\n\t): Promise<any> {\n\t\treturn this.service.getOne(id, this.prepareOptions(options));\n\t}\n\n\tcreate(\n\t\tbodyParams?:\n\t\t\t| {\n\t\t\t\t\t[key: string]: any;\n\t\t\t  }\n\t\t\t| FormData,\n\t\toptions?: {\n\t\t\tselect?: any;\n\t\t} & SendOptions\n\t) {\n\t\treturn this.service.create(bodyParams, this.prepareOptions(options));\n\t}\n\n\tupdate(\n\t\tid: string,\n\t\tbodyParams?:\n\t\t\t| FormData\n\t\t\t| {\n\t\t\t\t\t[key: string]: any;\n\t\t\t  },\n\t\toptions?: {\n\t\t\tselect?: any;\n\t\t} & SendOptions\n\t) {\n\t\treturn this.service.update(\n\t\t\tid,\n\t\t\tbodyParams,\n\t\t\tthis.prepareOptions(options)\n\t\t);\n\t}\n\n\tdelete(id: string, options?: SendOptions) {\n\t\treturn this.service.delete(id, this.prepareOptions(options));\n\t}\n\n\tauthWithPassword(\n\t\tusernameOrEmail: string,\n\t\tpassword: string,\n\t\toptions?: RecordOptions | undefined\n\t) {\n\t\treturn this.service.authWithPassword(\n\t\t\tusernameOrEmail,\n\t\t\tpassword,\n\t\t\tthis.prepareOptions(options)\n\t\t);\n\t}\n\n\tauthWithOAuth2Code(\n\t\tprovider: string,\n\t\tcode: string,\n\t\tcodeVerifier: string,\n\t\tredirectUrl: string,\n\t\tcreateData?: { [key: string]: any } | undefined,\n\t\toptions?: RecordOptions | undefined\n\t) {\n\t\treturn this.service.authWithOAuth2Code(\n\t\t\tprovider,\n\t\t\tcode,\n\t\t\tcodeVerifier,\n\t\t\tredirectUrl,\n\t\t\tcreateData,\n\t\t\tthis.prepareOptions(options)\n\t\t);\n\t}\n\n\tauthWithOAuth2(options: OAuth2AuthConfig): Promise<RecordAuthResponse> {\n\t\treturn this.service.authWithOAuth2(options);\n\t}\n\n\tauthRefresh(options?: RecordOptions | undefined) {\n\t\treturn this.service.authRefresh(this.prepareOptions(options));\n\t}\n}\n\nexport class TypedPocketBase<Schema extends GenericSchema> extends PocketBase {\n\tfrom<\n\t\tCollectionName extends keyof Schema,\n\t\tCollection extends GenericCollection = Schema[CollectionName]\n\t>(\n\t\tname: CollectionName\n\t): Collection['type'] extends 'view'\n\t\t? ViewCollectionService<Collection>\n\t\t: Collection['type'] extends 'base'\n\t\t\t? BaseCollectionService<Collection>\n\t\t\t: AuthCollectionService<Collection> {\n\t\treturn new TypedRecordService(this.collection(name as string)) as any;\n\t}\n}\n","import {\n\tArrayInnerType,\n\tGenericCollection,\n\tMaybeMakeArray,\n\tPrettify\n} from './types.js';\n\nexport type Select<Collection extends GenericCollection> = {\n\t[K in keyof Collection['response']]?: boolean;\n};\n\nexport type SelectWithExpand<Collection extends GenericCollection> =\n\tSelect<Collection> & {\n\t\texpand?: {\n\t\t\t[K in keyof Collection['relations']]?:\n\t\t\t\t| SelectWithExpand<ArrayInnerType<Collection['relations'][K]>>\n\t\t\t\t| boolean;\n\t\t};\n\t};\n\nexport type ResolveSelect<\n\tTCollection extends GenericCollection,\n\tTSelect extends Select<TCollection> | undefined\n> =\n\tExtract<keyof TSelect, keyof TCollection['response']> extends never\n\t\t? TCollection['response']\n\t\t: {\n\t\t\t\t[K in keyof TSelect &\n\t\t\t\t\tkeyof TCollection['response'] as TSelect[K] extends true\n\t\t\t\t\t? K\n\t\t\t\t\t: never]: TCollection['response'][K];\n\t\t\t};\n\nexport type ResolveSelectWithExpand<\n\tTCollection extends GenericCollection,\n\tTSelect extends Select<TCollection> | undefined\n> = Prettify<\n\tResolveSelect<TCollection, TSelect> &\n\t\t('expand' extends keyof TSelect\n\t\t\t? {\n\t\t\t\t\texpand?: {\n\t\t\t\t\t\t[Relation in keyof TSelect['expand'] &\n\t\t\t\t\t\t\tkeyof TCollection['relations'] as TSelect['expand'][Relation] extends false\n\t\t\t\t\t\t\t? never\n\t\t\t\t\t\t\t: Relation]?: TSelect['expand'][Relation] extends true\n\t\t\t\t\t\t\t? MaybeMakeArray<\n\t\t\t\t\t\t\t\t\tTCollection['relations'][Relation],\n\t\t\t\t\t\t\t\t\tArrayInnerType<\n\t\t\t\t\t\t\t\t\t\tTCollection['relations'][Relation]\n\t\t\t\t\t\t\t\t\t>['response']\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t: TSelect['expand'][Relation] extends object\n\t\t\t\t\t\t\t\t? MaybeMakeArray<\n\t\t\t\t\t\t\t\t\t\tTCollection['relations'][Relation],\n\t\t\t\t\t\t\t\t\t\tResolveSelectWithExpand<\n\t\t\t\t\t\t\t\t\t\t\tArrayInnerType<\n\t\t\t\t\t\t\t\t\t\t\t\tTCollection['relations'][Relation]\n\t\t\t\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\t\t\t\tTSelect['expand'][Relation]\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t: never;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t: {})\n>;\n\nexport function resolveSelect(select: any) {\n\tconst fieldList: string[] = [];\n\tconst expandList: string[] = [];\n\n\tif (select) {\n\t\t(function recurse(\n\t\t\t{ expand, ...rest }: SelectWithExpand<any>,\n\t\t\tfieldsParent: string[] = [],\n\t\t\texpandParent: string[] = []\n\t\t) {\n\t\t\tif (Object.keys(rest).length === 0) {\n\t\t\t\tfieldList.push([...fieldsParent, '*'].join('.'));\n\t\t\t} else {\n\t\t\t\tfor (const key in rest) {\n\t\t\t\t\tif (rest[key]) {\n\t\t\t\t\t\tfieldList.push([...fieldsParent, key].join('.'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (expand) {\n\t\t\t\tfor (const key in expand) {\n\t\t\t\t\tconst sub = expand[key];\n\t\t\t\t\tif (sub === true) {\n\t\t\t\t\t\texpandList.push([...expandParent, key].join('.'));\n\t\t\t\t\t\tfieldList.push(\n\t\t\t\t\t\t\t[...fieldsParent, 'expand', key, '*'].join('.')\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (sub) {\n\t\t\t\t\t\texpandList.push([...expandParent, key].join('.'));\n\t\t\t\t\t\trecurse(\n\t\t\t\t\t\t\tsub,\n\t\t\t\t\t\t\t[...fieldsParent, 'expand', key],\n\t\t\t\t\t\t\t[...expandParent, key]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})(select);\n\t} else {\n\t\tfieldList.push('*');\n\t}\n\n\treturn {\n\t\tfields: fieldList.join(','),\n\t\texpand: expandList.join(',')\n\t};\n}\n"],"mappings":"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","names":[]}